// Script pour initialiser des donn√©es de test
// Ce script peut √™tre ex√©cut√© dans la console du navigateur

async function initializeTestData() {
  console.log('üöÄ Initialisation des donn√©es de test...');
  
  // Importer les services n√©cessaires
  const { VehiculeManagementService } = await import('./src/firebase/vehicule-management-service.js');
  const { FamilleService } = await import('./src/firebase/famille-service.js');
  
  try {
    // 1. S'assurer que les familles par d√©faut existent
    await FamilleService.initializeDefaultFamilles();
    console.log('‚úÖ Familles par d√©faut cr√©√©es');
    
    // 2. R√©cup√©rer les familles disponibles
    const familles = await FamilleService.getAllFamilles();
    console.log('üìã Familles disponibles:', familles.map(f => `${f.nom} (${f.couleur})`));
    
    // 3. Assigner des familles aux v√©hicules de test
    const testAssignments = [
      { vehiculeId: 'vsav_1', familleId: 'vsav' },
      { vehiculeId: 'ccf', familleId: 'incendie' },
      { vehiculeId: 'fpt', familleId: 'incendie' },
      { vehiculeId: 'vtu', familleId: 'sauvetage' }
    ];
    
    for (const assignment of testAssignments) {
      try {
        await VehiculeManagementService.updateVehiculeFamilleId(assignment.vehiculeId, assignment.familleId);
        console.log(`‚úÖ ${assignment.vehiculeId} ‚Üí famille ${assignment.familleId}`);
      } catch (error) {
        console.log(`‚ö†Ô∏è  V√©hicule ${assignment.vehiculeId} non trouv√©, ignor√©`);
      }
    }
    
    console.log('üéâ Donn√©es de test initialis√©es avec succ√®s !');
    console.log('üí° Actualisez la page pour voir les changements');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation:', error);
  }
}

// Fonction pour tester le changement dynamique de couleurs
async function testDynamicColorUpdate() {
  console.log('üé® Test de mise √† jour dynamique des couleurs...');
  
  try {
    const { VehiculeManagementService } = await import('./src/firebase/vehicule-management-service.js');
    
    // Changer la famille du premier v√©hicule trouv√©
    const vehicules = await VehiculeManagementService.getVehiculesWithOrder();
    if (vehicules.length > 0) {
      const vehicule = vehicules[0];
      const nouvelleFamille = vehicule.familleId === 'vsav' ? 'incendie' : 'vsav';
      
      await VehiculeManagementService.updateVehiculeFamilleId(vehicule.id, nouvelleFamille);
      console.log(`‚úÖ V√©hicule ${vehicule.id} chang√© vers famille ${nouvelleFamille}`);
      
      // D√©clencher le rafra√Æchissement si disponible
      if (window.refreshHomePage) {
        window.refreshHomePage();
        console.log('üîÑ Page rafra√Æchie automatiquement');
      } else {
        console.log('üí° Actualisez manuellement la page pour voir le changement');
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  }
}

// Exposer les fonctions globalement pour les tests
window.initializeTestData = initializeTestData;
window.testDynamicColorUpdate = testDynamicColorUpdate;

console.log('üìù Fonctions de test disponibles:');
console.log('   - initializeTestData() : Initialise des donn√©es de test');
console.log('   - testDynamicColorUpdate() : Test le changement dynamique de couleurs');
